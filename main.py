import datetime
import sqlite3
import smtplib
from telebot import types
import telebot
import time
import os
import random
from config import BOT_TOKEN, URL, ANSWERS, ADMIN_ID, ANNOUNCEMENT, SAY, DELIVERY, INTRODUCE, SENDER, PASS, ADMINS, \
    BAN_LIST
from assortiment import beer, cidre, crackers, knuts, fish, cheese, lemonade, energize, sodie_pop, bottle_price
from nick_names import NICK

"""
–ß—Ç–æ –±—ã –±–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–ª - —Å–ª–µ–¥—É–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª config.py –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–¥–∞—Ç—å —Ç–∞–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN
—Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–∫–µ–Ω –í–∞—à–µ–≥–æ –±–æ—Ç–∞. –¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é URL –≤ –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω—É–∂–Ω—ã–π –í–∞–º —Å–∞–π—Ç.
–í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ANNOUNCEMENT –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏—è.

–ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–µ–π –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å–ª–æ–≤–∞—Ä—è –≤ assortiment.py,
–∞ –∑–∞—Ç–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é choose–ù–£–ñ–ù–´–ô_–¢–û–í–ê–† —Ç–∞–∫, —á—Ç–æ –±—ã —É –∫–Ω–æ–ø–∫–∏ –±—ã–ª–æ —Ç–∞–∫–æ–µ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á—Ç–æ –∏ —É –≤ —Å–ª–æ–≤–∞—Ä–µ. 
–¢–∞–∫ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
–Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∏.

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞:
start - –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É
help - –£–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
site - –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç
generate -  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Ñ–ª
write - –ó–∞–ø–∏—Å–∞—Ç—å –æ–±—â—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ –ö–≠–® (–ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞)
read - –ó–∞–ø–∏—Å–∞—Ç—å –ö–≠–® –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞)
zakaz - –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:

–†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

–†–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–æ–≤. 
–ù—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å
–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã login_id

–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""

pennij_bot = telebot.TeleBot(BOT_TOKEN)

# cart = {1626668178: {'–ü–∏–≤–æ –í–∞–π—Å–±–µ—Ä–≥': 5.5, '–ü–∏–≤–æ –ì–∞–≥–∞—Ä–∏–Ω': 3.0, '–ü–∏–≤–æ –°—Ç–∞—É—Ç': 1.5, '–ü–∏–≤–æ –†–µ–≥–∏–æ–Ω 82': 1.5,
#                      '–ü–∏–≤–æ –•–æ—Ä–≤–∞—Ç—Å–∫–æ–µ': 2.0, '–ü–∏–≤–æ –®—Ç–æ—Ä–º–æ–≤–æ–µ': 2.5, '–ü–∏–≤–æ –î–æ–º–∞—à–Ω–µ–µ': 2.5, '–ü–∏–≤–æ –ß–µ—à—Å–∫–æ–µ –≠–ª–∏—Ç–Ω–æ–µ': 2.5,
#                      '–ü–∏–≤–æ –ú–æ—Ä—è–∫': 2.0, '–°–∏–¥—Ä –ì–æ–ª—É–±–∞—è –ª–∞–≥—É–Ω–∞': 1.0, '–°–∏–¥—Ä –ú–∞–Ω–≥–æ-–º–∞—Ä–∞–∫—É–π—è': 3.0,
#                      '–°—É—Ö–∞—Ä–∏–∫–∏ –¢–∞–π—Å–∫–∏–π –ø–µ—Ä–µ—Ü': 0.2, '–°—É—Ö–∞—Ä–∏–∫–∏ –ö—Ä–∞–±': 0.1, '–ó–∞–∫—É—Å–∫–∞ –ü–∞–ª–æ—á–∫–∏ –∏–∑ —Ç—É–Ω—Ü–∞': 1,
#                      '–ó–∞–∫—É—Å–∫–∞ –ú—è—Å–Ω—ã–µ –∫–Ω—É—Ç—ã': 1, '–õ–∏–º–æ–Ω–∞–¥ –ö–ª—É–±–Ω–∏—á–Ω—ã–π': 1, '–õ–∏–º–æ–Ω–∞–¥ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π': 1,
#                      '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ TARGET ACTIVE': 1, '–ü–æ–ª—Ç–æ—Ä–∞—à–∫–∞ CitrusHit Bochkari': 1},
#         1626668178: {'–ü–∏–≤–æ –í–∞–π—Å–±–µ—Ä–≥': 5.5, '–ü–æ–ª—Ç–æ—Ä–∞—à–∫–∞ CitrusHit Bochkari': 1}
#         }

cart = {}

DIR = "memes"

"""–†–∞–∑–¥–µ–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""


@pennij_bot.message_handler(commands=["start"])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üçª –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üêü')
    btn2 = types.KeyboardButton('üõü –ü–æ–º–æ—â—å')
    btn3 = types.KeyboardButton('üìÑ –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    markup.row(btn1)
    markup.row(btn2, btn3)

    connect = sqlite3.connect('shop.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
    chat_id INTEGER,
    user_name TEXT,
    user_id INTEGER,
    reg_date TEXT,
    last_date TEXT);
    """)

    connect.commit()

    chat_id = message.chat.id
    user_name = message.from_user.first_name
    reg_date = " ".join(str(datetime.datetime.now()).split('.')[0:-1])
    if message.from_user.username:
        user_name += f' "{message.from_user.username}"'
    if message.from_user.last_name:
        user_name += f' {message.from_user.last_name}'
    user_id = message.from_user.id
    last_date = " ".join(str(datetime.datetime.now()).split('.')[0:-1])
    cursor.execute(f"SELECT chat_id FROM login_id WHERE chat_id = {chat_id}")
    data = cursor.fetchone()
    if data is None:
        cursor.execute("INSERT INTO login_id VALUES(?,?,?,?,?);", (chat_id,
                                                                   user_name,
                                                                   user_id,
                                                                   reg_date,
                                                                   last_date))
        connect.commit()

        pennij_bot.send_message(message.chat.id,
                                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, {message.from_user.first_name} –≤ –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–µ ‚Äî –ö—Ä—É–∂–∫–∞ –ü–µ–Ω–Ω–æ–≥–æ!"
                                f"\n–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å 10:00 –¥–æ 21:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!"
                                f"\n–ó–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ 21:00 ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å."
                                f"\n–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑:"
                                f"\n‚Äî –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–ö–æ–Ω—Ç–∞–∫—Ç—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é "
                                f"–∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞;"
                                f"\n‚Äî –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ "
                                f"–≤ —Ä–∞–∑–¥–µ–ª–µ '–ö–æ—Ä–∑–∏–Ω–∞';"
                                "\n‚Äî –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–µ—Ä—á–∏ 200—Ä.",
                                parse_mode='html', reply_markup=markup)
    else:
        cursor.execute("UPDATE login_id SET last_date = ? WHERE chat_id = ?", (reg_date, chat_id))
        connect.commit()

        pennij_bot.send_message(message.chat.id,
                                f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! "
                                f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å <b>–ø–∏–≤–æ –∏ —Ä—ã–±–∫—É</b> —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ;)"
                                f"\n–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ: üìÑ –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                                parse_mode='html', reply_markup=markup)


@pennij_bot.message_handler(commands=["to_all"])
def to_all(message):
    if message.chat.id == ADMIN_ID:
        pass


@pennij_bot.message_handler(commands=["write"])
def write(message):
    global cart
    try:
        if message.from_user.id == ADMIN_ID:
            with open('cache.txt', 'w') as file:
                for key, value in cart.items():
                    file.write(f"{key}:{value}\n")
            pennij_bot.send_message(message.chat.id, '–ö—ç—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        else:
            raise ValueError
    except ValueError:
        user_name = "EMPTY_USERNAME"
        if message.from_user.username:
            user_name = message.from_user.username
        pennij_bot.send_message(message.chat.id, f'{message.from_user.first_name}:{message.chat.id} –ø—ã—Ç–∞–ª—Å—è '
                                                 f'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /write! @{user_name}')
        pennij_bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!')


@pennij_bot.message_handler(commands=["read"])
def read(message):
    global cart
    if message.from_user.id == ADMIN_ID:
        try:
            with open('cache.txt', 'r') as file:
                lines = file.readlines()
                for line in lines:
                    key, value = line.strip().split(':', maxsplit=1)
                    if int(key) not in cart:
                        cart[int(key)] = eval(value)
            pennij_bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞!')
        except FileNotFoundError:
            pennij_bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞!')
    else:
        user_name = "EMPTY_USERNAME"
        if message.from_user.username:
            user_name = message.from_user.username
        pennij_bot.send_message(message.chat.id, f'{message.from_user.first_name}:{message.chat.id} –ø—ã—Ç–∞–ª—Å—è '
                                                 f'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /read! @{user_name}')
        pennij_bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!')


@pennij_bot.message_handler(commands=["zakaz"])
def commandOrder(message):
    if message.chat.id in cart:
        if cart[message.chat.id]:
            placing_an_order(message)
    else:
        pennij_bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


@pennij_bot.message_handler(commands=["generate"])
def generateNickname(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/generate')
    btn2 = types.KeyboardButton('/start')
    markup.row(btn1, btn2)
    nm_p = os.path.join(DIR, random.choice(os.listdir(DIR)))
    random.shuffle(NICK)
    nick = random.choice(NICK)
    pic = open(nm_p, 'rb')
    print(message.from_user.first_name, nm_p, nick, datetime.datetime.now())
    pennij_bot.send_photo(message.chat.id, pic, f'<b>{nick}</b>', parse_mode='html', reply_markup=markup)


@pennij_bot.message_handler(commands=["site", "website"])
def redirect_to_site(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=URL))
    pennij_bot.send_message(message.chat.id, "–ê—Ö –¥–∞, –≤–æ—Ç —Å—Å—ã–ª–æ—á–∫–∞:", reply_markup=markup)


@pennij_bot.message_handler(commands=["help"])
def get_help(message):
    pennij_bot.send_message(message.chat.id,
                            "<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ</b>: <u>/start</u> "
                            "\n<b>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:</b> <u>@repredess</u>",
                            parse_mode='html')


"""–†–∞–∑–¥–µ–ª —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞"""


def placing_an_order(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('–î–∞', callback_data='confirm_order'),
               telebot.types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel_order'))

    pennij_bot.send_message(message.chat.id,
                            '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=markup)


@pennij_bot.callback_query_handler(func=lambda callback: callback.data == 'confirm_order')
def confirm_order_handler(callback):
    if callback.message.chat.id in cart:
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
        btn2 = telebot.types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        markup.add(btn1, btn2)

        pennij_bot.answer_callback_query(callback.id, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞')
        pennij_bot.send_message(callback.message.chat.id,
                                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è',
                                reply_markup=markup)
    else:
        pennij_bot.answer_callback_query(callback.id, '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


@pennij_bot.callback_query_handler(func=lambda callback: callback.data == 'cancel_order')
def cancel_order_handler(callback):
    if callback.message.chat.id in cart:
        pennij_bot.answer_callback_query(callback.id, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
        goodsChapter(callback.message)
    else:
        pennij_bot.answer_callback_query(callback.id, '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


@pennij_bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.chat.id not in BAN_LIST:
        try:
            order, money = stashCheck(cart[message.chat.id])
            phone = message.contact.phone_number
            write_order(message, phone=phone, order=order, total=money)

            for id in ADMINS:
                pennij_bot.send_message(id, f"–ó–∞–∫–∞–∑ –¥–ª—è {message.from_user.first_name} –æ—Ñ–æ—Ä–º–ª–µ–Ω:\n{order}\n"
                                            f"–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: {message.contact.phone_number}", parse_mode='html')

            on_email = f"{order}\n–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: {message.contact.phone_number}\nID —á–∞—Ç–∞: {message.chat.id}"
            pennij_bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, {message.from_user.first_name}.',
                                    parse_mode='html')
            print(send_email(on_email, subject=f"–ó–∞–∫–∞–∑ –¥–ª—è {message.from_user.first_name} –æ—Ñ–æ—Ä–º–ª–µ–Ω\n"))
            del cart[message.chat.id]
            main_page(message, order=True)
        except KeyError:
            pennij_bot.send_message(message.chat.id, f'–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º —á—Ç–æ —Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.\n'
                                                     f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –µ—â–µ —Ä–∞–∑.')
            main_page(message)
    else:
        pennij_bot.send_message(message.chat.id, f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–∞–Ω–µ. –ó–∞–∫–∞–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω', parse_mode='html')


"""–†–∞–∑–¥–µ–ª —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞"""


@pennij_bot.message_handler(func=lambda message: message.text in beer)
def beer_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_liter = telebot.types.InlineKeyboardButton('+1–ª', callback_data=f'+1.0 –ü–∏–≤–æ {item}')
    add_poltora = telebot.types.InlineKeyboardButton('+1.5–ª', callback_data=f'+1.5 –ü–∏–≤–æ {item}')
    remove_liter = telebot.types.InlineKeyboardButton('-1–ª', callback_data=f'-1.0 –ü–∏–≤–æ {item}')
    remove_poltora = telebot.types.InlineKeyboardButton('-1.5–ª', callback_data=f'-1.5 –ü–∏–≤–æ {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_liter, add_liter)
    markup_inline.add(remove_poltora, add_poltora)
    if beer[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"]:
        adress = telebot.types.InlineKeyboardButton('üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ', url=beer[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"])
        markup_inline.add(adress, cart)
    else:
        markup_inline.add(cart)
    try:
        pic = open(f"goods/pivo/{item}.jpg", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<i><b>{item}</b> | {beer[item]["–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è"]}</i>'
                                                    f'\n{beer[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–ü–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {beer[item]["–ü–ª–æ—Ç–Ω–æ—Å—Ç—å"]}'
                                                    f'\n–ê–ª–∫–æ–≥–æ–ª—å: {beer[item]["–ê–ª–∫–æ–≥–æ–ª—å"]}'
                                                    f'\n–¶–µ–Ω–∞: {beer[item]["–¶–µ–Ω–∞"]}—Ä/–ª–∏—Ç—Ä',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/pivo/–ü–∏–≤–æ.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<i><b>{item}</b> | {beer[item]["–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è"]}</i>'
                                                    f'\n{beer[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–ü–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {beer[item]["–ü–ª–æ—Ç–Ω–æ—Å—Ç—å"]}'
                                                    f'\n–ê–ª–∫–æ–≥–æ–ª—å: {beer[item]["–ê–ª–∫–æ–≥–æ–ª—å"]}'
                                                    f'\n–¶–µ–Ω–∞: {beer[item]["–¶–µ–Ω–∞"]}—Ä/–ª–∏—Ç—Ä',
                              reply_markup=markup_inline,
                              parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in cidre)
def cidre_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_liter = telebot.types.InlineKeyboardButton('+1–ª', callback_data=f'+1.0 –°–∏–¥—Ä {item}')
    add_poltora = telebot.types.InlineKeyboardButton('+1.5–ª', callback_data=f'+1.5 –°–∏–¥—Ä {item}')
    remove_liter = telebot.types.InlineKeyboardButton('-1–ª', callback_data=f'-1.0 –°–∏–¥—Ä {item}')
    remove_poltora = telebot.types.InlineKeyboardButton('-1.5–ª', callback_data=f'-1.5 –°–∏–¥—Ä {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_liter, add_liter)
    markup_inline.add(remove_poltora, add_poltora)
    markup_inline.add(cart)

    try:
        pic = open(f"goods/ciders/{item}.jpg", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<i><b>{item}</b></i>'
                                                    f'\n{cidre[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {cidre[item]["–¶–µ–Ω–∞"]}—Ä/–ª–∏—Ç—Ä | '
                                                    f'–ê–ª–∫–æ–≥–æ–ª—å: {cidre[item]["–ê–ª–∫–æ–≥–æ–ª—å"]}',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/ciders/–°–∏–¥—Ä—ã.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<i><b>{item}</b></i>'
                                                    f'\n{cidre[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {cidre[item]["–¶–µ–Ω–∞"]}—Ä/–ª–∏—Ç—Ä | '
                                                    f'–ê–ª–∫–æ–≥–æ–ª—å: {cidre[item]["–ê–ª–∫–æ–≥–æ–ª—å"]}',
                              reply_markup=markup_inline,
                              parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in knuts)
def knuts_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_one = telebot.types.InlineKeyboardButton('+1—à—Ç', callback_data=f'+1 –ó–∞–∫—É—Å–∫–∞ {item}')
    remove_one = telebot.types.InlineKeyboardButton('-1—à—Ç', callback_data=f'-1 –ó–∞–∫—É—Å–∫–∞ {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_one, add_one)
    markup_inline.add(cart)

    try:
        pic = open(f"goods/knuts/{item}.jpg", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{knuts[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {knuts[item]["–¶–µ–Ω–∞"]}—Ä/—É–ø–∞–∫–æ–≤–∫–∞',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/knuts/–ü–∞–ª–æ—á–∫–∏.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<i><b>{item}</b></i>'
                                                    f'\n{knuts[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {knuts[item]["–¶–µ–Ω–∞"]}—Ä/—É–ø–∞–∫–æ–≤–∫–∞',
                              reply_markup=markup_inline,
                              parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in crackers)
def crackers_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_one = telebot.types.InlineKeyboardButton('+100–≥—Ä', callback_data=f'+100 –°—É—Ö–∞—Ä–∏–∫–∏ {item}')
    remove_one = telebot.types.InlineKeyboardButton('-100–≥—Ä', callback_data=f'-100 –°—É—Ö–∞—Ä–∏–∫–∏ {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_one, add_one)
    markup_inline.add(cart)

    try:
        pic = open(f"goods/crackers/{item}.jpg", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{crackers[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n–û—Å—Ç—Ä–æ—Ç–∞: {crackers[item]["–û—Å—Ç—Ä–æ—Ç–∞"]}',
                              f'\n'
                              f'\n–¶–µ–Ω–∞: {int(crackers[item]["–¶–µ–Ω–∞"] / 10)}—Ä/100–≥—Ä',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/crackers/crackers.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<i><b>{item}</b></i>'
                                                    f'\n{crackers[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n–û—Å—Ç—Ä–æ—Ç–∞: {crackers[item]["–û—Å—Ç—Ä–æ—Ç–∞"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {int(crackers[item]["–¶–µ–Ω–∞"] / 10)}—Ä/100–≥—Ä',
                              reply_markup=markup_inline,
                              parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in fish)
def fish_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    if fish[item]["–§–∞—Å–æ–≤–∫–∞"] == "–ù–∞—Ä–∞–∑–≤–µ—Å":
        serving_option = "100–≥—Ä"
        add_gramms = telebot.types.InlineKeyboardButton('+100–≥—Ä', callback_data=f'+100 –†—ã–±–∫–∞ {item}')
        remove_gramms = telebot.types.InlineKeyboardButton('-100–≥—Ä', callback_data=f'-100 –†—ã–±–∫–∞ {item}')
        cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
        markup_inline.add(remove_gramms, add_gramms)
        markup_inline.add(cart)

        try:
            pic = open(f"goods/riba/{item}.jpg", 'rb')
            pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                        f'\n{fish[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                        f'\n'
                                                        f'\n–¶–µ–Ω–∞: {int(fish[item]["–¶–µ–Ω–∞"] / 10)}—Ä/'
                                                        f'<b>{serving_option}</b>',
                                  reply_markup=markup_inline,
                                  parse_mode='html')
        except FileNotFoundError:
            pic = open(f'goods/riba/—Ä—ã–±–∞.jpg', 'rb')
            pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                        f'\n{fish[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                        f'\n'
                                                        f'\n–¶–µ–Ω–∞: {int(fish[item]["–¶–µ–Ω–∞"] / 10)}—Ä/'
                                                        f'<b>{serving_option}</b>',
                                  reply_markup=markup_inline,
                                  parse_mode='html')
    elif fish[item]["–§–∞—Å–æ–≤–∫–∞"] == "–ü–æ—à—Ç—É—á–Ω–æ":
        serving_option = "1—à—Ç"
        if item == "–ë—ã—á–∫–∏":
            serving_option = "10—à—Ç(—Ñ–∞—Å–æ–≤–∞–Ω—ã–π)"
        add_gramms = telebot.types.InlineKeyboardButton('+1—à—Ç', callback_data=f'+1 –†—ã–±–∫–∞ {item}')
        remove_gramms = telebot.types.InlineKeyboardButton('-1—à—Ç', callback_data=f'-1 –†—ã–±–∫–∞ {item}')
        cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
        markup_inline.add(remove_gramms, add_gramms)
        markup_inline.add(cart)

        try:
            pic = open(f"goods/riba/{item}.jpg", 'rb')
            pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                        f'\n{fish[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                        f'\n'
                                                        f'\n–¶–µ–Ω–∞: {fish[item]["–¶–µ–Ω–∞"]}—Ä/<b>{serving_option}</b>',
                                  reply_markup=markup_inline,
                                  parse_mode='html')
        except FileNotFoundError:
            pic = open(f'goods/riba/—Ä—ã–±–∞.jpg', 'rb')
            pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                        f'\n{fish[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                        f'\n'
                                                        f'\n–¶–µ–Ω–∞: {fish[item]["–¶–µ–Ω–∞"]}—Ä/<b>{serving_option}</b>',
                                  reply_markup=markup_inline,
                                  parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in cheese)
def cheese_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_one = telebot.types.InlineKeyboardButton('+1—à—Ç', callback_data=f'+1 –°—ã—Ä {item}')
    remove_one = telebot.types.InlineKeyboardButton('-1—à—Ç', callback_data=f'-1 –°—ã—Ä {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_one, add_one)
    markup_inline.add(cart)

    try:
        pic = open(f"goods/cheese/{item}.jpg", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{cheese[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {cheese[item]["–¶–µ–Ω–∞"]}—Ä/<b>1—à—Ç</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/cheese/–ö–æ—Å–∏—á–∫–∞.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{cheese[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {cheese[item]["–¶–µ–Ω–∞"]}—Ä/<b>1—à—Ç</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in lemonade)
def lemonade_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_one = telebot.types.InlineKeyboardButton('+1—à—Ç', callback_data=f'+1 –õ–∏–º–æ–Ω–∞–¥ {item}')
    remove_one = telebot.types.InlineKeyboardButton('-1—à—Ç', callback_data=f'-1 –õ–∏–º–æ–Ω–∞–¥ {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_one, add_one)
    if lemonade[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"]:
        adress = telebot.types.InlineKeyboardButton('üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ', url=lemonade[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"])
        markup_inline.add(adress, cart)
    else:
        markup_inline.add(cart)

    try:
        pic = open(f"goods/lemonade/{item}.png", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{lemonade[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {lemonade[item]["–¶–µ–Ω–∞"]}—Ä/<b>1—à—Ç</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/lemonade/–õ–∏–º–æ–Ω–∞–¥.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{lemonade[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {lemonade[item]["–¶–µ–Ω–∞"]}—Ä/<b>1—à—Ç</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in energize)
def energize_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_one = telebot.types.InlineKeyboardButton('+1—à—Ç', callback_data=f'+1 –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ {item}')
    remove_one = telebot.types.InlineKeyboardButton('-1—à—Ç', callback_data=f'-1 –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_one, add_one)
    if energize[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"]:
        adress = telebot.types.InlineKeyboardButton('üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ', url=energize[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"])
        markup_inline.add(adress, cart)
    else:
        markup_inline.add(cart)

    try:
        pic = open(f"goods/energize/{item}.png", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{energize[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {energize[item]["–¶–µ–Ω–∞"]}—Ä/<b>1—à—Ç</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/lemonade/–õ–∏–º–æ–Ω–∞–¥.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{energize[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {energize[item]["–¶–µ–Ω–∞"]}—Ä/<b>1—à—Ç</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')


@pennij_bot.message_handler(func=lambda message: message.text in sodie_pop)
def sodie_pop_add(message):
    item = message.text
    markup_inline = telebot.types.InlineKeyboardMarkup()
    add_one = telebot.types.InlineKeyboardButton('+1—à—Ç', callback_data=f'+1 –ü–æ–ª—Ç–æ—Ä–∞—à–∫–∞ {item}')
    remove_one = telebot.types.InlineKeyboardButton('-1—à—Ç', callback_data=f'-1 –ü–æ–ª—Ç–æ—Ä–∞—à–∫–∞ {item}')
    cart = telebot.types.InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data=f'shoppingCart')
    markup_inline.add(remove_one, add_one)
    if sodie_pop[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"]:
        adress = telebot.types.InlineKeyboardButton('üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ', url=sodie_pop[item]["–ü–æ–¥—Ä–æ–±–Ω–µ–µ"])
        markup_inline.add(adress, cart)
    else:
        markup_inline.add(cart)

    try:
        pic = open(f"goods/sodie_pop/{item}.png", 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{sodie_pop[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {sodie_pop[item]["–¶–µ–Ω–∞"]}—Ä/<b>1.5–ª</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        pic = open(f'goods/lemonade/–õ–∏–º–æ–Ω–∞–¥.jpg', 'rb')
        pennij_bot.send_photo(message.chat.id, pic, f'<b><i>{item}</i></b>'
                                                    f'\n{sodie_pop[item]["–û–ø–∏—Å–∞–Ω–∏–µ"]}'
                                                    f'\n'
                                                    f'\n–¶–µ–Ω–∞: {sodie_pop[item]["–¶–µ–Ω–∞"]}—Ä/1.5–ª</b>',
                              reply_markup=markup_inline,
                              parse_mode='html')


"""–†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""


@pennij_bot.callback_query_handler(func=lambda callback: callback.data == "shoppingCart")
def show_cart_callback(callback):
    if callback.message.chat.id in cart:
        if cart[callback.message.chat.id]:
            total_ammount = cartChapter(callback=callback)
            pennij_bot.answer_callback_query(callback.id, f'–ò—Ç–æ–≥–æ: {total_ammount}—Ä')
        else:
            pennij_bot.answer_callback_query(callback.id, f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
    else:
        pennij_bot.answer_callback_query(callback.id, f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


def show_cart_button(message):
    cartID = message.chat.id
    if cartID in cart:
        if cart[cartID]:
            cartChapter(message=message)
        else:
            pennij_bot.send_message(message.chat.id, f"–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        pennij_bot.send_message(message.chat.id, f"–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")


def stashCheck(query):
    print(cart)
    sorted_query = dict(sorted(query.items(), key=lambda x: x[0]))
    check = f'{"~" * 25}\n'
    total_ammount = 0 + DELIVERY
    bottles_query = {'1.5': 0,
                     '1': 0}
    bottles_ammount = 0
    check_id = 0
    for key, value in sorted_query.items():
        item_type, item_name = key.split(maxsplit=1)

        if item_type == "–ü–∏–≤–æ":
            check_id += 1
            ammount = int(beer[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}–ª: {ammount}—Ä\n'
            get_bottles = smartBottles(value)
            for key, value in get_bottles.items():
                bottles_query[key] += value
            total_ammount += ammount

        elif item_type == "–°–∏–¥—Ä":
            check_id += 1
            ammount = int(cidre[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}–ª: {ammount}—Ä\n'
            get_bottles = smartBottles(value)
            for key, value in get_bottles.items():
                bottles_query[key] += value
            total_ammount += ammount

        elif item_type == "–õ–∏–º–æ–Ω–∞–¥":
            check_id += 1
            ammount = int(lemonade[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}—à—Ç: {ammount}—Ä\n'
            total_ammount += ammount

        elif item_type == "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫":
            check_id += 1
            ammount = int(energize[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}—à—Ç: {ammount}—Ä\n'
            total_ammount += ammount

        elif item_type == "–ü–æ–ª—Ç–æ—Ä–∞—à–∫–∞":
            check_id += 1
            ammount = int(sodie_pop[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}—à—Ç: {ammount}—Ä\n'
            total_ammount += ammount

        elif item_type == "–°—É—Ö–∞—Ä–∏–∫–∏":
            check_id += 1
            ammount = int(crackers[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {int(value * 1000)}–≥—Ä: {ammount}—Ä\n'
            total_ammount += ammount

        elif item_type == "–ó–∞–∫—É—Å–∫–∞":
            check_id += 1
            ammount = int(knuts[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}—à—Ç: {ammount}—Ä\n'
            total_ammount += ammount

        elif item_type == "–°—ã—Ä":
            check_id += 1
            ammount = int(cheese[item_name]['–¶–µ–Ω–∞'] * value)
            check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}—à—Ç: {ammount}—Ä\n'
            total_ammount += ammount

        elif item_type == "–†—ã–±–∫–∞":
            check_id += 1
            if fish[item_name]['–§–∞—Å–æ–≤–∫–∞'] == "–ù–∞—Ä–∞–∑–≤–µ—Å":
                ammount = int(fish[item_name]['–¶–µ–Ω–∞'] * value)
                check += f'{check_id}) {item_type} <b>"{item_name}"</b> {int(value * 1000)}–≥—Ä: {ammount}—Ä\n'
                total_ammount += ammount
            elif fish[item_name]['–§–∞—Å–æ–≤–∫–∞'] == "–ü–æ—à—Ç—É—á–Ω–æ":
                ammount = int(fish[item_name]['–¶–µ–Ω–∞'] * value)
                if item_name == "–ë—ã—á–∫–∏":
                    check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}—É–ø({value * 10}—à—Ç): {ammount}—Ä\n'
                else:
                    check += f'{check_id}) {item_type} <b>"{item_name}"</b> {value}—à—Ç: {ammount}—Ä\n'
                total_ammount += ammount

    for key, value in bottles_query.items():
        if value:
            bottles_ammount += value * bottle_price
            check_id += 1
            check += f'{check_id}) {key}–ª X {value} = {value * bottle_price}—Ä\n'
    total_ammount += bottles_ammount

    check += f'{"~" * 25}\n' \
             f'–î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY}—Ä\n' \
             f'–¢–∞—Ä–∞: {bottles_ammount}—Ä\n' \
             f'–ò—Ç–æ–≥–æ: {total_ammount}—Ä'

    return [check, total_ammount]


@pennij_bot.callback_query_handler(func=lambda callback: True)
def purchase_callback(callback):
    global cart
    callback_request = callback.data.split()[0]
    print(f"{callback.data} –¥–ª—è {callback.from_user.first_name}  - callback_request")
    if callback_request == "+1":
        option = 1
        item = " ".join(callback.data.split()[1:])
        serving_option = "—à—Ç"
        add_to_cart(callback, item, option, serving_option)

    elif callback_request == "-1":
        if callback.message.chat.id in cart:
            option = 1
            item = " ".join(callback.data.split()[1:])
            serving_option = "—à—Ç"
            try:
                remove_from_cart(callback, item, option, serving_option)
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {cart[callback.message.chat.id][item]}')
            except KeyError:
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ')
        else:
            pennij_bot.answer_callback_query(callback.id, f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

    if callback_request == "+1.0":
        option = 1.0
        item = " ".join(callback.data.split()[1:])
        serving_option = "–ª"
        add_to_cart(callback, item, option, serving_option)

    elif callback_request == "-1.0":
        if callback.message.chat.id in cart:
            option = 1.0
            item = " ".join(callback.data.split()[1:])
            serving_option = "–ª"
            try:
                remove_from_cart(callback, item, option, serving_option)
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {cart[callback.message.chat.id][item]}')
            except KeyError:
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ')
        else:
            pennij_bot.answer_callback_query(callback.id, f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

    elif callback_request == "+1.5":
        option = 1.5
        item = " ".join(callback.data.split()[1:])
        serving_option = "–ª"
        add_to_cart(callback, item, option, serving_option)

    elif callback_request == "-1.5":
        if callback.message.chat.id in cart:
            option = 1.5
            item = " ".join(callback.data.split()[1:])
            serving_option = "–ª"
            try:
                remove_from_cart(callback, item, option, serving_option)
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {cart[callback.message.chat.id][item]}')
            except KeyError:
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ')
        else:
            pennij_bot.answer_callback_query(callback.id, f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

    elif callback_request == "+100":
        option = 0.1
        item = " ".join(callback.data.split()[1:])
        serving_option = "–≥—Ä"
        add_to_cart(callback, item, option, serving_option)

    elif callback_request == "-100":
        if callback.message.chat.id in cart:
            option = 0.1
            item = " ".join(callback.data.split()[1:])
            serving_option = "–≥—Ä"
            try:
                remove_from_cart(callback, item, option, serving_option)
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {cart[callback.message.chat.id][item]}')
            except KeyError:
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ')
        else:
            pennij_bot.answer_callback_query(callback.id, f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


def add_to_cart(callback, item, option, serving_option):
    if callback.message.chat.id not in cart:
        cart.update({callback.message.chat.id: {}})
        cart[callback.message.chat.id][item] = round(cart[callback.message.chat.id].get(item, 0) + option, 1)
        if serving_option != "–≥—Ä":
            pennij_bot.answer_callback_query(callback.id,
                                             f'{item} –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart[callback.message.chat.id][item]}'
                                             f'{serving_option}')
        else:
            pennij_bot.answer_callback_query(callback.id,
                                             f'{item} –≤ –∫–æ—Ä–∑–∏–Ω–µ: {int(cart[callback.message.chat.id][item] * 1000)}'
                                             f'{serving_option}')
    else:
        cart[callback.message.chat.id][item] = round(cart[callback.message.chat.id].get(item, 0) + option, 1)
        if serving_option != "–≥—Ä":
            pennij_bot.answer_callback_query(callback.id,
                                             f'{item} –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart[callback.message.chat.id][item]}'
                                             f'{serving_option}')
        else:
            pennij_bot.answer_callback_query(callback.id,
                                             f'{item} –≤ –∫–æ—Ä–∑–∏–Ω–µ: {int(cart[callback.message.chat.id][item] * 1000)}'
                                             f'{serving_option}')


def remove_from_cart(callback, item, option, serving_option):
    try:
        rqst = cart[callback.message.chat.id].get(item)
        print(f'{item} for {callback.from_user.first_name}')
        if rqst - option <= 0.5:
            del cart[callback.message.chat.id][item]
            pennij_bot.answer_callback_query(callback.id, f'{item} - —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
        else:
            cart[callback.message.chat.id][item] = round(cart[callback.message.chat.id].get(item) - option, 1)
            if serving_option != "–≥—Ä":
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω–µ: '
                                                 f'{cart[callback.message.chat.id][item]}{serving_option}')
            else:
                pennij_bot.answer_callback_query(callback.id,
                                                 f'{item} –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω–µ: '
                                                 f'{int(cart[callback.message.chat.id][item] * 1000)}'
                                                 f'{serving_option}')
    except TypeError:
        pennij_bot.answer_callback_query(callback.id,
                                         f'{item} - –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ')


def cartChapter(message=None, callback=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    btn2 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É")
    markup.row(btn1, btn2)

    if message:
        stash, total_ammount = stashCheck(cart[message.chat.id])
        pennij_bot.send_message(message.chat.id, f'–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞, {message.from_user.first_name}:'
                                                 f'\n{stash}', reply_markup=markup, parse_mode='html')
    elif callback:
        stash, total_ammount = stashCheck(cart[callback.message.chat.id])
        pennij_bot.send_message(callback.message.chat.id, f'–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞, {callback.from_user.first_name}:'
                                                          f'\n{stash}', reply_markup=markup, parse_mode='html')

    return total_ammount


"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""


@pennij_bot.message_handler()
def user_messages(message):
    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if message.text == 'üçª –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üêü':
        goodsChapter(message)
    elif message.text == 'üõü –ü–æ–º–æ—â—å':
        if message.chat.id != ADMIN_ID:
            pennij_bot.send_message(message.chat.id, '–î–µ—Ä–∂–∏—Å—å, –±—Ä–∞—Ç!')
        else:
            admins_menu(message)
    elif message.text == 'üìÑ –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        pennij_bot.send_message(message.chat.id,
                                '–ó–∞–∫–∞–∑–∞—Ç—å –ø–∏–≤–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:'
                                '\n<i>+79155633989</i> - <b>–ö–∏—Ä–∏–ª–ª</b>'
                                '\n'
                                '\n<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</b> - <u>@repredess</u>',
                                parse_mode='html')
    elif message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        show_cart_button(message)

    elif message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        placing_an_order(message)

    # –ö–Ω–æ–ø–∫–∞ "–ü–ò–í–û"
    elif message.text == '–ü–∏–≤–æ':
        chooseBeer(message)
    # elif message.text == '–í–∞–π—Å–±–µ—Ä–≥':
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     btn1 = types.KeyboardButton('üõí –î–æ–±–∞–≤–∏—Ç—å "–í–∞–π—Å–±–µ—Ä–≥"')
    #     btn2 = types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–∏–≤—É')
    #     markup.row(btn1, btn2)
    #     pic = open("goods/pivo/–í–∞–π—Å–±–µ—Ä–≥.jpg", 'rb')
    #     pennij_bot.send_photo(message.chat.id, pic, '–ù–µ–∂–Ω–æ–µ –ø–∏–≤–æ —Å —Å–ª–∏–≤–æ—á–Ω—ã–º –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ–º. –ê–ª–∫–æ–≥–æ–ª—å 4.7.',
    #                           reply_markup=markup)
    elif message.text == '–°–∏–¥—Ä—ã':
        chooseSidre(message)

    # –ö–Ω–æ–ø–∫–∞ "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–û–ï"
    elif message.text == '–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–µ':
        chooseNotAlco(message)
    # –í–∏–¥—ã –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ
    elif message.text == '–õ–∏–º–æ–Ω–∞–¥—ã':
        chooseLemonade(message)
    elif message.text == '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏':
        chooseEnergize(message)
    elif message.text == '–°–ª–∞–¥–∫–∞—è –≤–æ–¥–∞':
        chooseSodiePop(message)

    # –ö–Ω–æ–ø–∫–∞ "–°–ù–ï–ö–ò"
    elif message.text == '–°–Ω–µ–∫–∏':
        chooseSnacs(message)
    # –í–∏–¥—ã —Å–Ω–µ–∫–æ–≤
    elif message.text == '–°—É—Ö–∞—Ä–∏–∫–∏':
        chooseCrackers(message)
    elif message.text == '–ö–Ω—É—Ç—ã –∏ –ø–∞–ª–æ—á–∫–∏':
        chooseSticks(message)
    elif message.text == '–†—ã–±–∫–∞':
        chooseFish(message)
    elif message.text == '–°—ã—Ä—ã':
        chooseCheese(message)

    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        goodsChapter(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É':
        goodsChapter(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        main_page(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–∏–≤—É':
        chooseBeer(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–∏–¥—Ä–∞–º':
        chooseSidre(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä—ã–±–∫–µ':
        chooseFish(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å—É—Ö–∞—Ä–∏–∫–∞–º':
        chooseCrackers(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–Ω–µ–∫–∞–º':
        chooseSnacs(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–º—É':
        chooseNotAlco(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ª–æ—á–∫–∞–º':
        chooseSticks(message)
    else:
        pennij_bot.reply_to(message, f'{random.choice(ANSWERS)} \n<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</b>: <u>/start</u>',
                            parse_mode='html')


"""–ü–æ–¥—Ä–∞–∑–¥–µ–ª –∏ —Ä–∞–∑–¥–µ–ª —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""


def admins_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("/write")
    btn2 = types.KeyboardButton("/read")
    btn3 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    markup.row(btn1, btn2)
    markup.row(btn3)

    pennij_bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup=markup)


def main_page(message, order=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üçª –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üêü')
    btn2 = types.KeyboardButton('üõü –ü–æ–º–æ—â—å')
    btn3 = types.KeyboardButton('üìÑ –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    markup.row(btn1)
    markup.row(btn2, btn3)

    if not order:
        pennij_bot.send_message(message.chat.id,
                                f"–£–≤–µ—Ä–µ–Ω —Ç–µ–±–µ –∑–¥–µ—Å—å –Ω—Ä–∞–≤–∏—Ç—Å—è, <b>{message.from_user.first_name}</b>! "
                                f"\n–¢—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å <b>–ø–∏–≤–æ –∏ —Ä—ã–±–∫—É</b> —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ;)"
                                f"\n–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ: üìÑ –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                                parse_mode='html', reply_markup=markup)
        announcment(message=message, say=SAY)
    else:
        pennij_bot.send_message(message.chat.id,
                                f"–°–∫–æ—Ä–æ —Ç–µ–±–µ –ø—Ä–µ–∑–≤–æ–Ω—è—Ç —á—Ç–æ –±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏. –ë—É–¥—å –Ω–∞ —Å–≤—è–∑–∏üòâ",
                                parse_mode='html', reply_markup=markup)
        announcment(message=message, say=SAY)


def goodsChapter(message, talk=True):
    connect = sqlite3.connect('shop.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
    chat_id INTEGER,
    user_name TEXT,
    user_id INTEGER,
    reg_date TEXT,
    last_date TEXT);
    """)

    connect.commit()

    chat_id = message.chat.id
    user_name = message.from_user.first_name
    reg_date = " ".join(str(datetime.datetime.now()).split('.')[0:-1])
    if message.from_user.username:
        user_name += f' "{message.from_user.username}"'
    if message.from_user.last_name:
        user_name += f' {message.from_user.last_name}'
    user_id = message.from_user.id
    cursor.execute(f"SELECT chat_id FROM login_id WHERE chat_id = {chat_id}")
    data = cursor.fetchone()
    if data is None:
        cursor.execute("INSERT INTO login_id VALUES(?,?,?,?,?);", (chat_id,
                                                                   user_name,
                                                                   user_id,
                                                                   reg_date,
                                                                   last_date))
        connect.commit()
    else:
        cursor.execute("UPDATE login_id SET last_date = ? WHERE chat_id = ?", (reg_date, chat_id))
        connect.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–∏–≤–æ")
    btn2 = types.KeyboardButton("–°–∏–¥—Ä—ã")
    btn3 = types.KeyboardButton("–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–µ")
    btn4 = types.KeyboardButton("–†—ã–±–∫–∞")
    btn5 = types.KeyboardButton("–°–Ω–µ–∫–∏")
    btn6 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    btn7 = types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    markup.row(btn1, btn2)
    markup.row(btn3, btn5)
    markup.row(btn7, btn4, btn6)
    intro = random.choice(INTRODUCE)

    if talk:
        pennij_bot.send_message(message.chat.id, f'{intro}', reply_markup=markup)

        if ANNOUNCEMENT:
            announcment(message, SAY, percent=20)


def chooseNotAlco(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–õ–∏–º–æ–Ω–∞–¥—ã")
    btn2 = types.KeyboardButton("–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏")
    btn3 = types.KeyboardButton("–°–ª–∞–¥–∫–∞—è –≤–æ–¥–∞")
    btn4 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É")
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)

    pennij_bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –≤—Å–µ ;) \n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseLemonade(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö–ª—É–±–Ω–∏—á–Ω—ã–π")
    btn2 = types.KeyboardButton("–ú–æ—Ö–∏—Ç–æ")
    btn3 = types.KeyboardButton("–ò–º–±–∏—Ä–Ω—ã–π")
    btn4 = types.KeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π")
    btn5 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–º—É")
    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5)

    pennij_bot.send_message(message.chat.id, '–õ—É—á—à–∏–µ –≤ –≥–æ—Ä–æ–¥–µüòâ\n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseEnergize(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("TARGET ZERO")
    btn2 = types.KeyboardButton("TARGET ACTIVE")
    btn3 = types.KeyboardButton("TARGET ORIGINAL")
    btn4 = types.KeyboardButton("TARGET MAXIMUM")
    btn5 = types.KeyboardButton("TARGET MANGO")
    btn6 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–º—É")
    markup.row(btn2, btn3, btn4)
    markup.row(btn1, btn5, btn6)

    pennij_bot.send_message(message.chat.id, '–ë–æ–¥—Ä—è—Ç –∫–∞–∫ –Ω–∞–¥–æüòè\n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseSodiePop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Cola Bochkari")
    btn2 = types.KeyboardButton("CitrusHit Bochkari")
    btn3 = types.KeyboardButton("Orange Bochkari")
    btn4 = types.KeyboardButton('–ö–≤–∞—Å "–ê–Ω–¥—Ä–µ–∏—á"')
    btn5 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–º—É")
    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5)

    pennij_bot.send_message(message.chat.id, '–°–ª–∞–¥–∫–∞—è –≤–æ–¥–∞, –∞ —á—Ç–æ –µ—â–µ –Ω–∞–¥–æüòå \n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseSticks(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ú—è—Å–Ω—ã–µ –∫–Ω—É—Ç—ã")
    btn2 = types.KeyboardButton("–ü–∞–ª–æ—á–∫–∏ –∏–∑ —â—É–∫–∏")
    btn3 = types.KeyboardButton("–ü–∞–ª–æ—á–∫–∏ –∏–∑ —Ç—É–Ω—Ü–∞")
    btn4 = types.KeyboardButton("–ü–∞–ª–æ—á–∫–∏ –∏–∑ –ª–æ—Å–æ—Å—è")
    btn5 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–Ω–µ–∫–∞–º")
    markup.row(btn2, btn3, btn4)
    markup.row(btn1, btn5)

    pennij_bot.send_message(message.chat.id, '–¢–æ —á—Ç–æ –Ω–∞–¥–æ –∫ –ø–∏–≤—Éü§§\n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseCrackers(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–µ")
    btn2 = types.KeyboardButton("–¢–∞–π—Å–∫–∏–π –ø–µ—Ä–µ—Ü")
    btn3 = types.KeyboardButton("–°–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä")
    btn4 = types.KeyboardButton("–í–µ—Ç—á–∏–Ω–∞-—Å—ã—Ä")
    btn5 = types.KeyboardButton("–ê–¥–∂–∏–∫–∞")
    btn6 = types.KeyboardButton("–ß–µ—Å–Ω–æ—á–Ω—ã–π –º–∏–∫—Å")
    btn7 = types.KeyboardButton("–ö—Ä–∞–±")
    btn8 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–Ω–µ–∫–∞–º")
    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5, btn6)
    markup.row(btn7, btn8)

    pennij_bot.send_message(message.chat.id, '–í—Å–µ–≥–¥–∞ –≤–∫—É—Å–Ω—ã–µ –∏ —Ö—Ä—É—Å—Ç—è—â–∏–µ', reply_markup=markup)


def chooseSnacs(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–°—É—Ö–∞—Ä–∏–∫–∏")
    btn2 = types.KeyboardButton("–°—ã—Ä—ã")
    btn3 = types.KeyboardButton("–ö–Ω—É—Ç—ã –∏ –ø–∞–ª–æ—á–∫–∏")
    btn4 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É")
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)

    pennij_bot.send_message(message.chat.id, '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µüòã', reply_markup=markup)


def chooseCheese(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö–æ—Å–∏—á–∫–∞")
    btn2 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–Ω–µ–∫–∞–º")
    markup.row(btn1, btn2)

    pennij_bot.send_message(message.chat.id, '–£–ø—Ä—É–≥–∏–µ –∏ –≤–∫—É—Å–Ω—ã–µüòã \n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseSidre(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ì–æ–ª—É–±–∞—è –ª–∞–≥—É–Ω–∞")
    btn2 = types.KeyboardButton("–õ–∞–º–±—Ä—É—Å—Å–∫–æ")
    btn3 = types.KeyboardButton("–ú–∞–Ω–≥–æ-–º–∞—Ä–∞–∫—É–π—è")
    btn4 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É")
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)

    pennij_bot.send_message(message.chat.id, '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µüòã \n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseFish(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö–æ—Ä—é—à–∫–∞")
    btn2 = types.KeyboardButton("–¢–∞—Ä–∞–Ω—å")
    btn3 = types.KeyboardButton("–ì–æ—Ä–±—É—à–∞ (–∫–æ–ø—á–µ–Ω–∞—è)")
    btn4 = types.KeyboardButton("–ì—É—Å—Ç–µ—Ä–∞")
    btn5 = types.KeyboardButton("–õ–µ—â")
    btn6 = types.KeyboardButton("–ë—ã—á–∫–∏")
    btn7 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É")
    markup.row(btn1, btn2, btn4, btn5)
    markup.row(btn3, btn6, btn7)

    pennij_bot.send_message(message.chat.id, '–í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∞—è —Ä—ã–±–∫–∞üêü\n–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


def chooseBeer(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–í–∞–π—Å–±–µ—Ä–≥")
    btn2 = types.KeyboardButton("–ì–∞–≥–∞—Ä–∏–Ω")
    btn3 = types.KeyboardButton("–®—Ç–æ—Ä–º–æ–≤–æ–µ")
    btn4 = types.KeyboardButton("–°—Ç–∞—É—Ç")
    btn5 = types.KeyboardButton("–î–æ–º–∞—à–Ω–µ–µ")
    btn6 = types.KeyboardButton("–†–µ–≥–∏–æ–Ω 82")
    btn7 = types.KeyboardButton("–ß–µ—à—Å–∫–æ–µ –≠–ª–∏—Ç–Ω–æ–µ")
    btn8 = types.KeyboardButton("–ú–æ—Ä—è–∫")
    btn9 = types.KeyboardButton("–•–æ—Ä–≤–∞—Ç—Å–∫–æ–µ")
    btn10 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É")
    markup.row(btn1, btn2, btn4, btn6)
    markup.row(btn9, btn3, btn5)
    markup.row(btn7, btn8, btn10)

    pennij_bot.send_message(message.chat.id, '–ü–∏–≤–æ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Åüòâ \n–í—ã–±–∏—Ä–∞–π –ª—é–±–æ–µ:', reply_markup=markup)


"""–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""


def write_order(message, phone, order, total):
    connect = sqlite3.connect('shop.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS orders(
        chat_id INTEGER,
        user_name TEXT,
        user_id INTEGER,
        user_phone INTEGER,
        user_order TEXT,
        order_date TEXT,
        order_ammount INTEGER);
        """)

    connect.commit()

    chat_id = message.chat.id
    user_phone = phone
    order_date = " ".join(str(datetime.datetime.now()).split('.')[0:-1])
    user_id = message.from_user.id
    user_order = order
    order_ammount = total
    user_name = message.from_user.first_name
    if message.from_user.username:
        user_name += f' "{message.from_user.username}"'
    if message.from_user.last_name:
        user_name += f' {message.from_user.last_name}'

    cursor.execute("INSERT INTO orders VALUES(?,?,?,?,?,?,?);", (chat_id,
                                                                 user_name,
                                                                 user_id,
                                                                 user_phone,
                                                                 user_order,
                                                                 order_date,
                                                                 order_ammount))
    connect.commit()


def send_email(message, subject):
    message = message.replace('<b>', '').replace('</b>', '')
    clear_message = f"Subject: {subject}{message}".encode('UTF-8')

    sender = SENDER
    password = PASS

    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()

    try:
        server.login(sender, password)
        server.sendmail(sender, 'kruzkapennogo@gmail.com', clear_message)

        return "The message was sent successfully!"
    except Exception as _ex:
        return f"{_ex}\n Check your login or password please!"


def smartBottles(liters):
    is_good = liters / 1.5
    if is_good.is_integer():
        bottles_1_5 = is_good
        return {'1.5': int(bottles_1_5)}
    else:
        bottles_1 = 1
        while True:
            is_good = (liters - bottles_1) / 1.5
            if is_good.is_integer():
                bottles_1_5 = is_good
                if int(bottles_1_5) > 0:
                    return {'1.5': int(bottles_1_5), '1': int(bottles_1)}
                else:
                    return {'1': int(bottles_1)}
            else:
                bottles_1 += 1


def announcment(message, say, percent=None):
    if percent:
        random_number = random.randint(0, 101)
        if random_number <= percent:
            tell = random.choice(say)
            pennij_bot.send_message(message.chat.id, f'{tell}', parse_mode='html')
            print(f'–û–≥–ª–∞—Å–∏–ª "{tell}" –¥–ª—è {message.from_user.first_name}'
                  f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_number} —Å —à–∞–Ω—Å–æ–º {percent}% –∏–∑ 100')
    else:
        tell = random.choice(say)
        pennij_bot.send_message(message.chat.id, f'{tell}', parse_mode='html')
        print(f'–û–≥–ª–∞—Å–∏–ª "{tell}" –¥–ª—è {message.from_user.first_name}')


def send_to_admin(message, in_app=False):
    id = message.from_user.id
    print(message)
    if id == ADMIN_ID:
        print(f"Admin is HEREEEü´°. Name {message.from_user.first_name}")
        # pennij_bot.send_message(ADMIN_ID, "Its Admin's ID")
    elif id != ADMIN_ID:
        if in_app:
            pennij_bot.send_message(ADMIN_ID, f'Somebody come to find for some beer. His name/ID ='
                                              f' {message.from_user.first_name}{id}')
        print(f'Somebody wanna find some. His ID = {id}. Name {message.from_user.first_name}')


def into_translit(text):
    d = {
        '–∞': 'a', '–∫': 'k', '—Ö': 'h', '–±': 'b', '–ª': 'l', '—Ü': 'c', '–≤': 'v', '–º': 'm', '—á': 'ch',
        '–≥': 'g', '–Ω': 'n', '—à': 'sh', '–¥': 'd', '–æ': 'o', '—â': 'shh', '–µ': 'e', '–ø': 'p', '—ä': '*',
        '—ë': 'jo', '—Ä': 'r', '—ã': 'y', '–∂': 'zh', '—Å': 's', '—å': "'", '–∑': 'z', '—Ç': 't', '—ç': 'je',
        '–∏': 'i', '—É': 'u', '—é': 'ju', '–π': 'j', '—Ñ': 'f', '—è': 'ya'
    }

    main_fin = ''

    for i in text:
        if i.lower() in d:
            if i.islower():
                main_fin += d.get(i)
            elif i.isupper():
                main_fin += d.get(i.lower()).title()
        else:
            main_fin += i

    return main_fin


def go_infinity():
    print("some troubles with network")
    try:
        # https://stackoverflow.com/questions/68739567/socket-timeout-on-telegram-bot-polling
        pennij_bot.infinity_polling(timeout=10, long_polling_timeout=5)
        pennij_bot.send_message(message_chat.id, "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É")
        # pennij_bot.polling(none_stop=True)
    except requests.exceptions.ConnectionError:
        pennij_bot.infinity_polling(timeout=10, long_polling_timeout=5)
    time.sleep(5)


try:
    # https://stackoverflow.com/questions/68739567/socket-timeout-on-telegram-bot-polling
    pennij_bot.infinity_polling(timeout=10, long_polling_timeout=5)
except requests.exceptions.ConnectionError:
    print("–¢—Ä–∞–±–ª—ã ConnectionError")
    pennij_bot.infinity_polling(timeout=10, long_polling_timeout=5)
except requests.exceptions.ReadTimeout:
    print("–¢—Ä–∞–±–ª—ã ReadTimeout")
    pennij_bot.infinity_polling(timeout=10, long_polling_timeout=5)
except telebot.apihelper.ApiTelegramException:
    print("–¢—Ä–∞–±–ª—ã ReadTimeout")
    pennij_bot.infinity_polling(timeout=10, long_polling_timeout=5)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç –∫–æ—Ç–æ—Ä—ã–π —É –º–µ–Ω—è –±—ã–ª:
# pennij_bot.polling(none_stop=True)
